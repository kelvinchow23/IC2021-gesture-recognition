[{"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\index.js":"1","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\App.js":"2","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\dashboard-list.component.js":"3","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\training-list.component.js":"4","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\settings-list.component.js":"5","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\stats-list.component.js":"6","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\training-settings.component.js":"7","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\training-main.component.js":"8","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\my-navbar.component.js":"9","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\login-list.component.js":"10","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\signup-list.component.js":"11","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\reducers\\index.js":"12","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\reducers\\trainSettings.js":"13","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\reducers\\userData.js":"14","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\actions\\index.js":"15","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\admin-list.component.js":"16"},{"size":470,"mtime":1608762435872,"results":"17","hashOfConfig":"18"},{"size":1470,"mtime":1610174943999,"results":"19","hashOfConfig":"18"},{"size":1244,"mtime":1610046497269,"results":"20","hashOfConfig":"18"},{"size":681,"mtime":1609953188389,"results":"21","hashOfConfig":"18"},{"size":403,"mtime":1610478064662,"results":"22","hashOfConfig":"18"},{"size":3123,"mtime":1607538845314,"results":"23","hashOfConfig":"18"},{"size":2523,"mtime":1609954199263,"results":"24","hashOfConfig":"18"},{"size":7363,"mtime":1610079235987,"results":"25","hashOfConfig":"18"},{"size":3104,"mtime":1610690204033,"results":"26","hashOfConfig":"18"},{"size":3415,"mtime":1610690285312,"results":"27","hashOfConfig":"18"},{"size":6761,"mtime":1610690214893,"results":"28","hashOfConfig":"18"},{"size":230,"mtime":1608762504474,"results":"29","hashOfConfig":"18"},{"size":474,"mtime":1609272795580,"results":"30","hashOfConfig":"18"},{"size":383,"mtime":1610690113059,"results":"31","hashOfConfig":"18"},{"size":787,"mtime":1610690085720,"results":"32","hashOfConfig":"18"},{"size":4956,"mtime":1610689772936,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1equpyx",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\index.js",[],["69","70"],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\App.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\dashboard-list.component.js",["71"],"import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\n class DashboardList extends Component {\r\n    render() {\r\n        if (this.props.someData.name !== '') {\r\n            return(\r\n                <div>\r\n                    <h3>Hello {this.props.someData.name}!</h3>\r\n                    <p> Please use the menu bar to navigate to stuff.</p>\r\n                </div>                \r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <h3> Hello!</h3>\r\n                <p>Welcome to flourish portal.  This application allows unique individuals to \r\n                control electronic devices with custom user-defined gestures.  To use this application,\r\n                you will need two <a href = 'https://www.digikey.com/en/products/detail/m5stack-technology-co-ltd/K016-D/10492136'>M5StickC units</a>. \r\n                Further hardware configuration details and firmware upload instructions can be found <a href=''>here</a>. </p>\r\n                <p>Please login to begin.</p>\r\n            </div>\r\n        )\r\n    }\r\n }\r\n\r\n \r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        someData: state.userData\r\n    }\r\n}\r\n\r\n export default connect(mapStateToProps, null)(DashboardList)","C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\training-list.component.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\settings-list.component.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\stats-list.component.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\training-settings.component.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\training-main.component.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\my-navbar.component.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\login-list.component.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\signup-list.component.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\reducers\\index.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\reducers\\trainSettings.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\reducers\\userData.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\actions\\index.js",[],"C:\\Users\\Kelvin\\Desktop\\IC2021-gesture-recognition\\client\\src\\components\\admin-list.component.js",["72"],"import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst array = [{id:1, name:\"test\", username:\"test\", email:\"test@test.com\"},\r\n{id:2, name:\"Kelvin\", username:\"kthchow\", email:\"kelvin@test.com\"},\r\n{id:3, name:\"admin\", username:\"admin\", email:\"admin@test.com\"},\r\n{id:4, name:\"testuser\", username:\"testuser\", email:\"testuser@test.com\"}\r\n];\r\n\r\n\r\n export default class AdminList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            profileData: [],\r\n            trainingData: [],\r\n            showTable: false\r\n        };\r\n    }\r\n\r\n    renderUserRequestList() {\r\n        return this.state.profileData.map((user) => {\r\n            const {username} = user;\r\n            return(\r\n                <option value={username}>{username}</option>\r\n            )\r\n        })\r\n    }\r\n\r\n    renderUserList() {\r\n        return this.state.profileData.map((user) => {\r\n            const {username} = user;\r\n            return(\r\n                <option value={username}>{username}</option>\r\n            )\r\n        })\r\n    }\r\n\r\n    downloadData() {\r\n        alert('TODO: download CSV data');\r\n    }\r\n\r\n    renderLogTable(username) {\r\n        console.log(username);\r\n        return (\r\n            <React.Fragment>\r\n                {<div>\r\n                    <p>User: {username} </p><Button onClick={this.downloadData.bind(this)}>Download CSV</Button>\r\n                </div>}\r\n                <Table className ='col-9'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Letter</th>\r\n                            <th>Time</th>\r\n                            <th>Data</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.trainingData.map(training => {\r\n                            return(\r\n                                <tr>\r\n                                    <td>{training.letter}</td>\r\n                                    <td>{training.datetime}</td>\r\n                                    <td className='truncate-table-data'>{training.data}</td>\r\n                                </tr>\r\n                        )})}\r\n                    </tbody>\r\n                </Table>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    getAllUsers() {\r\n        axios.get(window.location.href + '/getAllUsers')\r\n            .then(res => {\r\n                if (res.data) {\r\n                    this.setState({profileData: res.data});\r\n                } else {\r\n                    console.log('No users exist!');\r\n                }\r\n            });\r\n    }\r\n\r\n    getTrainingData(username) {\r\n        axios.get(window.location.href+'/getTrainingData/'+username)\r\n            .then(res => {\r\n                if (res.data) {\r\n                    console.log(res.data);   \r\n                    this.setState({\r\n                        trainingData : res.data,\r\n                        showTable: true\r\n                    }); \r\n                }\r\n                this.renderLogTable(username);\r\n            })\r\n    }\r\n\r\n    onUserSelect(e) {\r\n        this.getTrainingData(e.target.value);\r\n    }\r\n\r\n    sayhello(user) {\r\n        alert('hello '+ user);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllUsers();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Things to do: get users: 1) Training Requests 2) Get all users 3)Get table of all user data from selected user</p>\r\n                <h3>Admin Console</h3>\r\n                <h4>User Training Requests</h4>\r\n                <h4>User Data Explorer</h4>\r\n                <p>Click on a specific user to view their training data.  For now, testuser has training data</p>\r\n                <div className='row'>\r\n                    <Form className='col-2'>\r\n                        <Form.Group controlId='userSelect'>\r\n                            <Form.Label>Select User:</Form.Label>\r\n                            <Form.Control as='select' multiple onChange={this.onUserSelect.bind(this)}>\r\n                                {this.renderUserList()}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group controlId='userRequestSelect'>\r\n                            <Form.Label>Users with Request:</Form.Label>\r\n                            <Form.Control as='select' multiple onChange={this.onUserSelect.bind(this)}>\r\n                                {this.renderUserRequestList()}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </Form>\r\n                    <div className='col-9 offset-1'>\r\n                        {this.state.showTable && this.renderLogTable()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n }",{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":21,"column":102,"nodeType":"79","endLine":21,"endColumn":113},{"ruleId":"80","severity":1,"message":"81","line":7,"column":7,"nodeType":"82","messageId":"83","endLine":7,"endColumn":12},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'array' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]